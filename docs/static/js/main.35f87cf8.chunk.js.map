{"version":3,"sources":["../../mm-modules/src/loader.js","../../mm-modules/src/parser.js","../../mm-modules/index.js","components/Controls/Controls.js","components/Models/Models.js","components/Results/Results.js","components/App/App.js","index.js"],"names":["loadFile","file","reader","FileReader","Promise","resolve","reject","onerror","abort","DOMException","onload","result","readAsText","loadURL","url","req","XMLHttpRequest","open","responseType","send","NESTED_LISTS","parseMMP","mmp","indexOf","xmlString","excludeArray","json","DOMParser","parseFromString","firstChild","childNodes","forEach","node","localName","info","getJSONFromNode","groupNames","concepts","getJSONFromArray","getChildNodes","scenarios","parseXML","JSON","parse","e","console","error","alert","xmlNode","omitLocalNameProperty","nodeType","idx","getAttribute","textContent","xmlArray","a","push","xml","nodes","loadAndParse","loadAndParseURL","Controls","inputFile","useRef","inputURL","dispatch","useContext","AppContext","handleLoadURL","current","value","action","type","className","onClick","click","multiple","ref","style","display","onChange","evt","fileList","target","files","length","Array","from","f","placeholder","Models","state","setState","modelsJSON","canonical","map","i","id","author","date","name","Intl","DateTimeFormat","year","month","day","hour","minute","format","Date","classnames","Results","results","React","createContext","App","useReducer","oldState","newState","updatedState","Math","random","toString","slice","filter","model","mode","Provider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.35f87cf8.chunk.js","sourcesContent":["function loadFile(file) {\n    const reader = new FileReader();\n\n    return new Promise((resolve, reject) => {\n        reader.onerror = () => {\n            reader.abort();\n            reject(new DOMException('MMP file loading failed!'));\n        };\n\n        reader.onload = () => {\n            resolve(reader.result);\n        };\n\n        reader.readAsText(file);\n    });\n}\n\nfunction loadURL(url) {\n    const req = new XMLHttpRequest();\n\n    req.open('GET', url, true);\n    req.responseType = 'text';\n    \n    return new Promise((resolve, reject) => {\n        req.onerror = () => {\n            req.abort();\n            reject(new  DOMException('MMP url loading failed!'));\n        };\n\n        req.onload = () => {\n            resolve(req.result);\n        };\n\n        req.send();\n    });\n}\n\nexport {loadFile, loadURL};\n","const NESTED_LISTS = ['relationships', 'concepts', 'properties'];\n\nfunction parseMMP(mmp) {\n    try {\n        if (mmp.indexOf('<?xml') > -1) {\n            return parseXML(mmp);\n        }\n        else {\n            return JSON.parse(mmp);\n        }\n    }\n    catch (e) {\n        console.error(e);\n        alert('Parsing of mmp failed!');\n    }\n}\n\nfunction parseXML(xmlString, excludeArray = []) {\n    let json = {};\n    let parser = new DOMParser();\n    let xmlDoc = parser.parseFromString(xmlString, 'application/xml');\n    let childNodes = xmlDoc.firstChild.childNodes;\n\n    childNodes.forEach((node) => {\n        switch(node.localName) {\n            case 'info':\n                if (excludeArray.indexOf('info') === -1) {\n                    json.info = getJSONFromNode(node);\n                }\n            break;\n            case 'groupNames':\n                if (excludeArray.indexOf('group') === -1) {\n                    json.groupNames = getJSONFromNode(node, true);\n                }\n            break;\n            case 'concepts':\n                if (excludeArray.indexOf('concepts') === -1) {\n                    json.concepts = getJSONFromArray(getChildNodes(node));\n                }\n            break;\n            case 'scenarios':\n                if (excludeArray.indexOf('scenario') === -1) {\n                    json.scenarios = getJSONFromArray(getChildNodes(node));\n                }\n            break;\n        }\n    });\n\n    return json;\n}\n\nfunction getJSONFromNode(xmlNode, omitLocalNameProperty) {\n    let json = {};\n\n    xmlNode.childNodes.forEach((node) => {\n        if (node.nodeType === 1) {\n            if (node.localName === 'groupName') {\n                let idx = node.getAttribute('index');\n                json[idx] = node.textContent;\n            }\n            \n            if (NESTED_LISTS.indexOf(node.localName) > -1) {\n                json[node.localName] = getJSONFromArray(getChildNodes(node));\n            }\n            else if (!omitLocalNameProperty) {\n                json[node.localName] = node.textContent;\n            }\n        }\n    });\n    return json;\n}\n\nfunction getJSONFromArray(xmlArray) {\n    let a = [];\n\n    xmlArray.forEach((node) => {\n        a.push(getJSONFromNode(node));\n    });\n\n    return a;\n}\n\nfunction getChildNodes(xml) {\n    let nodes = [];\n\n    xml.childNodes.forEach((node) => {\n        if(node.nodeType === 1) {\n            nodes.push(node);\n        }\n    });\n\n    return nodes;\n}\n\nexport {parseMMP};\n","import {loadFile, loadURL} from './src/loader';\nimport {parseMMP} from './src/parser';\n\nasync function loadAndParse(file) {\n    return parseMMP(await loadFile(file));\n}\n\nasync function loadAndParseURL(url) {\n    return parseMMP(await loadURL(url));\n}\n\nexport {loadFile, loadURL, loadAndParse, loadAndParseURL, parseMMP};\n","import './Controls.css';\nimport {useContext, useRef} from 'react';\nimport {loadAndParse, loadAndParseURL} from 'mm-modules';\n\nimport {AppContext} from '../App/App';\n\n\n\nfunction Controls() {\n    const inputFile = useRef(null);\n    const inputURL = useRef('');\n    const {dispatch} = useContext(AppContext);\n    const handleLoadLocal = () => inputFile.current.click();\n\n    const handleLoadURL = async () => {\n        const json = await loadAndParseURL(inputURL.current.value);\n        dispatch({\n            action: {\n                type: 'addJSON',\n                json\n            }\n        });\n    };\n\n    const loadAndParseLocalModels = evt => {\n        const fileList = evt.target.files;\n        if (fileList && fileList.length > 0) {\n            const files = Array.from(fileList);\n            files.forEach(async f => {\n                const json = await loadAndParse(f);\n                dispatch({\n                    action: {\n                        type: 'addJSON',\n                        json\n                    }\n                });\n            });\n        }\n    };\n\n    const handleCompare = () => console.log(\"compare models...\");\n    \n    return (\n        <div className=\"controls\">\n            <div className=\"controls__load-local\">\n                <input \n                    type=\"button\"\n                    onClick={handleLoadLocal}\n                    value=\"Load from Local\"\n                    className=\"btn btn-ghost\"\n                />\n                <input \n                    type=\"file\" \n                    multiple={true}\n                    ref={inputFile}\n                    style={{display:\"none\"}}\n                    onChange={loadAndParseLocalModels}\n                    value=\"\"\n                />\n            </div>\n            <div className=\"controls__load-url\">\n                <input \n                    type=\"text\" \n                    ref={inputURL}\n                    className=\"input\"\n                    placeholder=\"Enter URL here\"\n                />\n                <input \n                    type=\"button\" \n                    onClick={handleLoadURL}\n                    value=\"Load from URL\" \n                    className=\"btn btn-ghost\"\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default Controls;\n","import {useContext} from 'react';\nimport classnames from 'classnames';\n\nimport {AppContext} from '../App/App';\n\nimport './Models.css';\n\nfunction Models() {\n    const {state, setState, dispatch} = useContext(AppContext);\n    const {modelsJSON, canonical} = state;\n\n    return (\n        <div className=\"models\">\n            {modelsJSON.map((json, i) => {\n                const {info, id} = json || {info: {}};\n                const {author, date, name} = info;\n                return (\n                    <div className=\"model-wrapper\" key={`model-${i}`}>\n                        <div className=\"model\">\n                            <div className=\"model__info\">\n                                <div className=\"model__author\">\n                                    {author || '[Author]'}\n                                </div>\n                                <div className=\"model__name\">\n                                    {name || '[Name]'}\n                                </div>\n                                <div className=\"model__date\">\n                                    {date ? new Intl.DateTimeFormat('en-US', {year: 'numeric', month: 'short', day: 'numeric', hour: 'numeric', minute: 'numeric' }).format(new Date(date)) : '[Date]'}\n                                </div>\n                            </div>\n                            <div className=\"model__controls\">\n                                <button\n                                    className={classnames('canonical-btn', {\n                                        'canonical-btn--selected': id === canonical\n                                    })}\n                                    onClick={() => setState({canonical: id})}\n                                >\n                                    <span>{'Canonical'}</span>\n                                </button>\n                                <button\n                                    className=\"delete-btn\"\n                                    onClick={() => dispatch({\n                                        action: {\n                                            type: 'removeModel',\n                                            id: id\n                                        }\n                                    })}\n                                >\n                                    {'Remove'}\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                );\n            })}\n        </div>\n    );\n}\n\nexport default Models;\n","import './Results.css';\n\nfunction Results({results}) {\n    return (\n        <div className=\"results\">\n            <h1>Results</h1>\n        </div>\n    );\n}\n\nexport default Results;\n","import React, {useReducer} from 'react';\nimport classnames from 'classnames';\n\nimport Controls from '../Controls/Controls';\nimport Models from '../Models/Models';\nimport Results from '../Results/Results';\n\nimport './App.css';\n\nexport const AppContext = React.createContext({\n    modelsJSON: [],\n    results: {},\n    canonical: null,\n});\n\nconst makeId = () => `id-${Math.random().toString(16).slice(2)}`;\n\nfunction App() {\n    const [state, setState] = useReducer((oldState, newState) => {\n        let updatedState = {...oldState, ...newState};\n        const {action} = newState;\n        if (action && action.type) {\n            // if needed, we can use this\n            if (action.type === 'addJSON') {\n                updatedState = {\n                    ...updatedState,\n                    modelsJSON: [\n                        ...updatedState.modelsJSON,\n                        {\n                            ...action.json,\n                            ...(!action.json.id && {id: makeId()})\n                        }\n                    ]\n                }\n            } else if (action.type === 'removeModel') {\n                updatedState = {\n                    ...updatedState,\n                    modelsJSON: updatedState.modelsJSON.filter((model) => model.id !== action.id),\n                    ...(updatedState.canonical === action.id && {canonical: null})\n                };\n            } \n        }\n        return updatedState;\n    }, {\n        modelsJSON: [],\n        results: {},\n        canonical: null,\n        mode: 'files',\n    });\n    const {modelsJSON, mode, results} = state;\n    return (\n        <AppContext.Provider value={{state, setState, dispatch: setState}}>\n            <div className=\"MMCompare\">\n                <header className=\"header\">\n                    <div className=\"header__primary\">\n                        <div className={\"logo\"}>\n                            <span>{'MentalModeler'}</span>\n                            <span>{'COMPARE'}</span>\n                        </div>\n                        <div className=\"header__mode-select\">\n                            <div\n                                className={classnames('header__mode-select-mode', {\n                                    'header__mode-select-mode--selected': mode === 'files'\n                                })}\n                                onClick={() => setState({mode: 'files'})}\n                            >\n                                <span>{'Files'}</span>\n                            </div>\n                            <div\n                                className={classnames('header__mode-select-mode', {\n                                    'header__mode-select-mode--selected': mode === 'compare'\n                                })}\n                                onClick={() => setState({mode: 'compare'})}\n                            >\n                                <span>{'Compare'}</span>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"header__secondary\">\n                        {mode === 'files' && (<Controls />)}\n                        {mode === 'compare' && (\n                            <input \n                                type=\"button\"\n                                // onClick={handleLoadLocal}\n                                value=\"Run comparision\"\n                                className=\"btn btn-ghost\"\n                            />\n                        )}\n                    </div>\n                </header>\n                <main className=\"main\">\n                    {mode === 'files' && (\n                        <Models />\n                    )}\n                    {mode === 'compare' && (\n                        <Results results={results} />\n                    )}\n                </main>\n            </div>\n        </AppContext.Provider>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}